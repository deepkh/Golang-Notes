// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FtpClient is the client API for Ftp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FtpClient interface {
	// Hello to server
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// List remote directory
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Ftp_ListClient, error)
	// Pull a file from remote
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Ftp_PullClient, error)
	// Push a file to remote
	Push(ctx context.Context, opts ...grpc.CallOption) (Ftp_PushClient, error)
}

type ftpClient struct {
	cc grpc.ClientConnInterface
}

func NewFtpClient(cc grpc.ClientConnInterface) FtpClient {
	return &ftpClient{cc}
}

func (c *ftpClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/protos.Ftp/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Ftp_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ftp_ServiceDesc.Streams[0], "/protos.Ftp/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ftp_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type ftpListClient struct {
	grpc.ClientStream
}

func (x *ftpListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ftpClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Ftp_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ftp_ServiceDesc.Streams[1], "/protos.Ftp/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ftp_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type ftpPullClient struct {
	grpc.ClientStream
}

func (x *ftpPullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ftpClient) Push(ctx context.Context, opts ...grpc.CallOption) (Ftp_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ftp_ServiceDesc.Streams[2], "/protos.Ftp/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpPushClient{stream}
	return x, nil
}

type Ftp_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushResponse, error)
	grpc.ClientStream
}

type ftpPushClient struct {
	grpc.ClientStream
}

func (x *ftpPushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ftpPushClient) CloseAndRecv() (*PushResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FtpServer is the server API for Ftp service.
// All implementations must embed UnimplementedFtpServer
// for forward compatibility
type FtpServer interface {
	// Hello to server
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// List remote directory
	List(*ListRequest, Ftp_ListServer) error
	// Pull a file from remote
	Pull(*PullRequest, Ftp_PullServer) error
	// Push a file to remote
	Push(Ftp_PushServer) error
	mustEmbedUnimplementedFtpServer()
}

// UnimplementedFtpServer must be embedded to have forward compatible implementations.
type UnimplementedFtpServer struct {
}

func (UnimplementedFtpServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedFtpServer) List(*ListRequest, Ftp_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFtpServer) Pull(*PullRequest, Ftp_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedFtpServer) Push(Ftp_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedFtpServer) mustEmbedUnimplementedFtpServer() {}

// UnsafeFtpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FtpServer will
// result in compilation errors.
type UnsafeFtpServer interface {
	mustEmbedUnimplementedFtpServer()
}

func RegisterFtpServer(s grpc.ServiceRegistrar, srv FtpServer) {
	s.RegisterService(&Ftp_ServiceDesc, srv)
}

func _Ftp_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Ftp/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ftp_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServer).List(m, &ftpListServer{stream})
}

type Ftp_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type ftpListServer struct {
	grpc.ServerStream
}

func (x *ftpListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ftp_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServer).Pull(m, &ftpPullServer{stream})
}

type Ftp_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type ftpPullServer struct {
	grpc.ServerStream
}

func (x *ftpPullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ftp_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FtpServer).Push(&ftpPushServer{stream})
}

type Ftp_PushServer interface {
	SendAndClose(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type ftpPushServer struct {
	grpc.ServerStream
}

func (x *ftpPushServer) SendAndClose(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ftpPushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ftp_ServiceDesc is the grpc.ServiceDesc for Ftp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ftp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Ftp",
	HandlerType: (*FtpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Ftp_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Ftp_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Ftp_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _Ftp_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpcftp.proto",
}
