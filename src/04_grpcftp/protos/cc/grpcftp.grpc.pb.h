// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcftp.proto
// Original file comments:
// fork from https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto
// 
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_grpcftp_2eproto__INCLUDED
#define GRPC_grpcftp_2eproto__INCLUDED

#include "grpcftp.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace protos {

class Ftp final {
 public:
  static constexpr char const* service_full_name() {
    return "protos.Ftp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Hello to server
    virtual ::grpc::Status Hello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::protos::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    // List remote directory
    std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::ListResponse>> List(::grpc::ClientContext* context, const ::protos::ListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::ListResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    // Pull a file from remote
    std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::PullResponse>> Pull(::grpc::ClientContext* context, const ::protos::PullRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::PullResponse>>(PullRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>>(AsyncPullRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    // Push a file to remote
    std::unique_ptr< ::grpc::ClientWriterInterface< ::protos::PushRequest>> Push(::grpc::ClientContext* context, ::protos::PushResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::protos::PushRequest>>(PushRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>> AsyncPush(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>>(AsyncPushRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>> PrepareAsyncPush(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>>(PrepareAsyncPushRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Hello to server
      virtual void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // List remote directory
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, ::protos::ListRequest* request, ::grpc::ClientReadReactor< ::protos::ListResponse>* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, ::protos::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::ListResponse>* reactor) = 0;
      #endif
      // Pull a file from remote
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Pull(::grpc::ClientContext* context, ::protos::PullRequest* request, ::grpc::ClientReadReactor< ::protos::PullResponse>* reactor) = 0;
      #else
      virtual void Pull(::grpc::ClientContext* context, ::protos::PullRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::PullResponse>* reactor) = 0;
      #endif
      // Push a file to remote
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Push(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::ClientWriteReactor< ::protos::PushRequest>* reactor) = 0;
      #else
      virtual void Push(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::experimental::ClientWriteReactor< ::protos::PushRequest>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::protos::ListResponse>* ListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::protos::PullResponse>* PullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::protos::PushRequest>* PushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>* AsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::protos::PushRequest>* PrepareAsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Hello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::protos::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>> AsyncHello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>> PrepareAsyncHello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::protos::ListResponse>> List(::grpc::ClientContext* context, const ::protos::ListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::protos::ListResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::ListResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::protos::PullResponse>> Pull(::grpc::ClientContext* context, const ::protos::PullRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::protos::PullResponse>>(PullRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::PullResponse>>(AsyncPullRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::protos::PushRequest>> Push(::grpc::ClientContext* context, ::protos::PushResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::protos::PushRequest>>(PushRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::protos::PushRequest>> AsyncPush(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::protos::PushRequest>>(AsyncPushRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::protos::PushRequest>> PrepareAsyncPush(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::protos::PushRequest>>(PrepareAsyncPushRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, ::protos::ListRequest* request, ::grpc::ClientReadReactor< ::protos::ListResponse>* reactor) override;
      #else
      void List(::grpc::ClientContext* context, ::protos::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::ListResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Pull(::grpc::ClientContext* context, ::protos::PullRequest* request, ::grpc::ClientReadReactor< ::protos::PullResponse>* reactor) override;
      #else
      void Pull(::grpc::ClientContext* context, ::protos::PullRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::PullResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Push(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::ClientWriteReactor< ::protos::PushRequest>* reactor) override;
      #else
      void Push(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::experimental::ClientWriteReactor< ::protos::PushRequest>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>* AsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::protos::ListResponse>* ListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request) override;
    ::grpc::ClientAsyncReader< ::protos::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::protos::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::protos::PullResponse>* PullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request) override;
    ::grpc::ClientAsyncReader< ::protos::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::protos::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::protos::PushRequest>* PushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response) override;
    ::grpc::ClientAsyncWriter< ::protos::PushRequest>* AsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::protos::PushRequest>* PrepareAsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Hello_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Pull_;
    const ::grpc::internal::RpcMethod rpcmethod_Push_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Hello to server
    virtual ::grpc::Status Hello(::grpc::ServerContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response);
    // List remote directory
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::protos::ListRequest* request, ::grpc::ServerWriter< ::protos::ListResponse>* writer);
    // Pull a file from remote
    virtual ::grpc::Status Pull(::grpc::ServerContext* context, const ::protos::PullRequest* request, ::grpc::ServerWriter< ::protos::PullResponse>* writer);
    // Push a file to remote
    virtual ::grpc::Status Push(::grpc::ServerContext* context, ::grpc::ServerReader< ::protos::PushRequest>* reader, ::protos::PushResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::protos::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::protos::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::protos::ListRequest* request, ::grpc::ServerAsyncWriter< ::protos::ListResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Pull() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::protos::PullRequest* request, ::grpc::ServerAsyncWriter< ::protos::PullResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Push() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::protos::PushRequest>* /*reader*/, ::protos::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPush(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::protos::PushResponse, ::protos::PushRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Hello<WithAsyncMethod_List<WithAsyncMethod_Pull<WithAsyncMethod_Push<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Hello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::HelloRequest, ::protos::HelloResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response) { return this->Hello(context, request, response); }));}
    void SetMessageAllocatorFor_Hello(
        ::grpc::experimental::MessageAllocator< ::protos::HelloRequest, ::protos::HelloResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::HelloRequest, ::protos::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Hello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::protos::ListRequest, ::protos::ListResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protos::ListRequest* request) { return this->List(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::protos::ListResponse>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::ListRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::protos::ListResponse>* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protos::ListRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Pull() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::protos::PullRequest, ::protos::PullResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protos::PullRequest* request) { return this->Pull(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::protos::PullResponse>* Pull(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::PullRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::protos::PullResponse>* Pull(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protos::PullRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Push() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::protos::PushRequest, ::protos::PushResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::protos::PushResponse* response) { return this->Push(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::protos::PushRequest>* /*reader*/, ::protos::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::protos::PushRequest>* Push(
      ::grpc::CallbackServerContext* /*context*/, ::protos::PushResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::protos::PushRequest>* Push(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::protos::PushResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Hello<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Pull<ExperimentalWithCallbackMethod_Push<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Hello<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Pull<ExperimentalWithCallbackMethod_Push<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Pull() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Push() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::protos::PushRequest>* /*reader*/, ::protos::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Pull() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Push() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::protos::PushRequest>* /*reader*/, ::protos::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPush(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Hello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hello(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Hello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->List(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Pull() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Pull(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Pull(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Pull(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Push() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Push(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::protos::PushRequest>* /*reader*/, ::protos::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Push(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Push(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::HelloRequest, ::protos::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::HelloRequest, ::protos::HelloResponse>* streamer) {
                       return this->StreamedHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::protos::HelloRequest* /*request*/, ::protos::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::HelloRequest,::protos::HelloResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Hello<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::protos::ListRequest, ::protos::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::protos::ListRequest, ::protos::ListResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::protos::ListRequest* /*request*/, ::grpc::ServerWriter< ::protos::ListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::protos::ListRequest,::protos::ListResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Pull() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::protos::PullRequest, ::protos::PullResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::protos::PullRequest, ::protos::PullResponse>* streamer) {
                       return this->StreamedPull(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::protos::PullRequest* /*request*/, ::grpc::ServerWriter< ::protos::PullResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPull(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::protos::PullRequest,::protos::PullResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<WithSplitStreamingMethod_Pull<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Hello<WithSplitStreamingMethod_List<WithSplitStreamingMethod_Pull<Service > > > StreamedService;
};

}  // namespace protos


#endif  // GRPC_grpcftp_2eproto__INCLUDED
