// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcftp.proto

#include "grpcftp.pb.h"
#include "grpcftp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protos {

static const char* Ftp_method_names[] = {
  "/protos.Ftp/Hello",
  "/protos.Ftp/List",
  "/protos.Ftp/Pull",
  "/protos.Ftp/Push",
};

std::unique_ptr< Ftp::Stub> Ftp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Ftp::Stub> stub(new Ftp::Stub(channel));
  return stub;
}

Ftp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Hello_(Ftp_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(Ftp_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Pull_(Ftp_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Push_(Ftp_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Ftp::Stub::Hello(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::protos::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protos::HelloRequest, ::protos::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hello_, context, request, response);
}

void Ftp::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protos::HelloRequest, ::protos::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, std::move(f));
}

void Ftp::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>* Ftp::Stub::PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protos::HelloResponse, ::protos::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protos::HelloResponse>* Ftp::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const ::protos::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::protos::ListResponse>* Ftp::Stub::ListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::protos::ListResponse>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void Ftp::Stub::experimental_async::List(::grpc::ClientContext* context, ::protos::ListRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::ListResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::protos::ListResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::protos::ListResponse>* Ftp::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::protos::ListResponse>* Ftp::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::protos::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

::grpc::ClientReader< ::protos::PullResponse>* Ftp::Stub::PullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::protos::PullResponse>::Create(channel_.get(), rpcmethod_Pull_, context, request);
}

void Ftp::Stub::experimental_async::Pull(::grpc::ClientContext* context, ::protos::PullRequest* request, ::grpc::experimental::ClientReadReactor< ::protos::PullResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::protos::PullResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Pull_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::protos::PullResponse>* Ftp::Stub::AsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::PullResponse>::Create(channel_.get(), cq, rpcmethod_Pull_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::protos::PullResponse>* Ftp::Stub::PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::protos::PullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::PullResponse>::Create(channel_.get(), cq, rpcmethod_Pull_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::protos::PushRequest>* Ftp::Stub::PushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::protos::PushRequest>::Create(channel_.get(), rpcmethod_Push_, context, response);
}

void Ftp::Stub::experimental_async::Push(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::experimental::ClientWriteReactor< ::protos::PushRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::protos::PushRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Push_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::protos::PushRequest>* Ftp::Stub::AsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::protos::PushRequest>::Create(channel_.get(), cq, rpcmethod_Push_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::protos::PushRequest>* Ftp::Stub::PrepareAsyncPushRaw(::grpc::ClientContext* context, ::protos::PushResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::protos::PushRequest>::Create(channel_.get(), cq, rpcmethod_Push_, context, response, false, nullptr);
}

Ftp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ftp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ftp::Service, ::protos::HelloRequest, ::protos::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Ftp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::HelloRequest* req,
             ::protos::HelloResponse* resp) {
               return service->Hello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ftp_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Ftp::Service, ::protos::ListRequest, ::protos::ListResponse>(
          [](Ftp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::ListRequest* req,
             ::grpc::ServerWriter<::protos::ListResponse>* writer) {
               return service->List(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ftp_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Ftp::Service, ::protos::PullRequest, ::protos::PullResponse>(
          [](Ftp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::PullRequest* req,
             ::grpc::ServerWriter<::protos::PullResponse>* writer) {
               return service->Pull(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ftp_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Ftp::Service, ::protos::PushRequest, ::protos::PushResponse>(
          [](Ftp::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::protos::PushRequest>* reader,
             ::protos::PushResponse* resp) {
               return service->Push(ctx, reader, resp);
             }, this)));
}

Ftp::Service::~Service() {
}

::grpc::Status Ftp::Service::Hello(::grpc::ServerContext* context, const ::protos::HelloRequest* request, ::protos::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ftp::Service::List(::grpc::ServerContext* context, const ::protos::ListRequest* request, ::grpc::ServerWriter< ::protos::ListResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ftp::Service::Pull(::grpc::ServerContext* context, const ::protos::PullRequest* request, ::grpc::ServerWriter< ::protos::PullResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ftp::Service::Push(::grpc::ServerContext* context, ::grpc::ServerReader< ::protos::PushRequest>* reader, ::protos::PushResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protos

